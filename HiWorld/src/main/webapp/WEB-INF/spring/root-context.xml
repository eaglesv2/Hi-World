<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- DB -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="org.mariadb.jdbc.Driver"></property>
		<property name="url"
			value="jdbc:mariadb://jdbc:mariadb://hi-world.cvlf2noxnadn.ap-northeast-2.rds.amazonaws.com:3306/Hi_World"></property>
		<property name="username" value="Hi_World"></property>
		<property name="password" value="Hi_World"></property>
	</bean>

	<!-- value는 값을 지정 ref는 이미 지정한 값을 가져오는 것 -->

	<bean id="SqlSessionFectory"
		class="org.mybatis.spring.SqlSessionFactoryBean">

		<property name="dataSource" ref="dataSource" />

		<property name="configLocation"
			value="classpath:/mybatis-config.xml" />

		<property name="mapperLocations"
			value="classpath:/mappers/*Mapper.xml" />

	</bean>



	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate"

		destroy-method="clearCache">

		<constructor-arg name="sqlSessionFactory"
			ref="SqlSessionFectory" />

	</bean>

	<!-- mapper interface: mapping파일의 sql call을 위한 interface 즉, mapping 파일의 
		sql을 java interface로 호출하게 해줌 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 이 패키지 아래 모든 인터페이스를 mapper 인터페이스로 인식 -->
		<property name="basePackage" value="com.test.test" />
	</bean>
	<!-- DataSourceTransactionManager: 주로 jdbc나 mybatis로 db접근시 사용 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- @Transactional 사용해서 트랜잭션 처리 가능하게 함(자동 롤백) -->
	<tx:annotation-driven transaction-manager="transactionManager"/>



</beans>
